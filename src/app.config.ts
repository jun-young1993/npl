import JSONFileManager from "./lib/config";
import * as os from "os";

export const APP_NAME = 'npm-fuse';
export const MODULE_FOLDER_NAME = 'npm-fuse-modules';

export const JsonConfig = new JSONFileManager("./config.json",{
    defaultJson: {
        "path": `${os.homedir()}/app/source`
    }
});
export const DefaultPackageJson = {
    "name": "noname",
    "version": "1.0.0",
    "engines": {},
    "files": [
        "dist"
    ],
    "module": "dist/mjs/index.js",
    "main": "dist/mjs/index.js",
    "types": "dist/mjs/index.d.ts",
    "exports": {
        ".": {
            "import": "./dist/mjs/index.js",
            "require": "./dist/cjs/index.js"
        }
    },
    "scripts": {
        "build": "rm -fr dist/* && tsc -p tsconfig.json && tsc -p tsconfig-cjs.json"
    },
    "description": "no description",

    "keywords": [],
    "author": {
        "name": "",
        "email": ""
    },
    "license": "",
    "bugs": {
        "url": ""
    },
    "devDependencies": {
        "@types/node": "^20.12.7",
        "typescript": "^5.4.5"
    }
}
export const DefaultNpmIgnore = `
**/*
!/dist/**
`;
export const DefaultGitIgnore = `
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
`;
export const PackageJsonValues = new JSONFileManager(`./temp/package-${new Date().getTime()}.json`,{
    defaultJson: DefaultPackageJson
});
export const Tsconfig = {
    "extends": "./tsconfig-base.json",
    "compilerOptions": {
        "module": "esnext",
        "outDir": "dist/mjs",
        "target": "esnext"
    }
};
export const TsconfigJsonValue = new JSONFileManager(`./temp/tsconfig-${new Date().getTime()}.json`,{
    defaultJson: Tsconfig
});
export const TsconfigBase  = {
    "compilerOptions": {
        "target": "ES5",
        "allowJs": true,
        "allowSyntheticDefaultImports": true,
        "baseUrl": "src",
        "declaration": true,
        "esModuleInterop": true,
        "inlineSourceMap": false,
        "listEmittedFiles": false,
        "listFiles": false,
        "moduleResolution": "node",
        "noFallthroughCasesInSwitch": true,
        "pretty": true,
        "resolveJsonModule": true,
        "rootDir": "src",
        "skipLibCheck": true,
        "strict": true,
        "traceResolution": false
    },
    "compileOnSave": false,
    "exclude": ["node_modules", "dist"],
    "include": ["src"]
}
export const TsconfigBaseJsonValue = new JSONFileManager(`./temp/tsconfig-base-${new Date().getTime()}.json`,{
    defaultJson: TsconfigBase
});
export const TsconfigCjs = {
    "extends": "./tsconfig-base.json",
    "compilerOptions": {
        "module": "commonjs",
        "outDir": "dist/cjs",
        "target": "es2015"
    }
};
export const TsconfigCjsJsonValue = new JSONFileManager(`./temp/tsconfig-cjs-${new Date().getTime()}.json`,{
    defaultJson: TsconfigCjs
});